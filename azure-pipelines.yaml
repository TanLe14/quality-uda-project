name: $(Date:yyyyMMdd)$(Rev:.r)
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

pool: tanlx-pool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'quality-uda-conn'
  resourceGroupName: 'Azuredevops'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  applicationname: 'myApplication-AppService'
  

stages:
#--------------------------------------------#
# BUILD STAGE
#--------------------------------------------#
- stage: Build
  jobs:

  - job: BuildInfrastructure
    steps:
    - task: DownloadSecureFile@1
      name: DownloadedFile
      displayName: Download terraform.tfvars
      inputs:
        secureFile: terraform.tfvars
     
    - script: echo $(DownloadedFile.secureFilePath)
    - script: mv "$(DownloadedFile.secureFilePath)" "$(Build.SourcesDirectory)/terraform/environments/test"
    
    #--------------------------------------------#
    # Use Terraform to create the Infrastructure
    # Install Terraform on the pipeline agent
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'

    # Run Terraform Init on the pipeline agent
    # ToDo: Replace the resource group name, storage account name, and container name below

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate32282588'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'root.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Destroy the resources in Azure by running a separate pipeline.

    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    #--------------------------------------------#
    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above.
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package FakeRestAPI'
      artifact: drop-fakerestapi

    #--------------------------------------------#
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step


    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package PerformanceTestSuite'
      artifact: drop-perftests

#--------------------------------------------#
# DEPLOYMENT STAGE
#--------------------------------------------#
- stage: Deploy
  jobs:
  #--------------------------------------------#
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    displayName: Deploy FakeRestAPI Web App
    environment: 'test'   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'     # ToDo
              appName: 'tanlxApplication-AppService'       # ToDo
              resourceGroupName: '$(resourceGroupName)' 
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip       # ToDo: Use the published zip artifact.
              deploymentMethod: auto
              
          #--------------------------------------------#
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            displayName: 'Run JMeter test suite against the App Service'
            inputs:
              script: |
                ls
                pwd
                sudo apt-get upgrade -y
                sudo apt-get install openjdk-11-jdk -y
                sudo apt-get install openjdk-11-jre-headless -y
                export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/
                wget "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.2.1.tgz"
                tar -xf apache-jmeter-5.2.1.tgz
                unzip -o $(Build.BuildId)-perftests.zip
                
                DIR=/home/vm_user/_work/1/drop-perftests/jmeter-html-report
                if [ ! -d "$DIR" ]; then
                    rm -rf jmeter-html-report
                fi
                ./apache-jmeter-5.2.1/bin/jmeter -n -t Stress.jmx -l jmeter.csv -e -f -o jmeter-html-report -j jmeter.log
          
                # check
                ls
                cat jmeter.log                                                                        
              workingDirectory: $(Pipeline.Workspace)/drop-perftests            # ToDo: Use the artifact name from the task above

          - task: ArchiveFiles@2
            displayName: 'Archive JMeter report'
            inputs:
              rootFolderOrFile: '/home/tanlx/myagent/_work/1/drop-perftests/jmeter-html-report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-report.zip'

          # JMeter report - Publish
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-report.zip
            displayName: 'Upload Package JMeter report'
            artifact: drop-jmeter-report



  #--------------------------------------------#
  # Selenium | Functional UI Tests
  # ToDo:
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name:  'test'       # ToDo: Change/provide a name     
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests    # ToDo: Change/provide a name

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get upgrade -y
                sudo apt-get update -y
                # sudo apt-get install -y chromium-browser
                sudo apt-get install -y gconf-service libasound2 libatk1.0-0 libcairo2 libcups2 libfontconfig1 libgdk-pixbuf2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libxss1 fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils
                wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo dpkg -i google-chrome-stable_current_amd64.deb
                sudo apt-get -fy install
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                pip3 install --upgrade requests
                pip3 install selenium
                pip3 install webdriver_manager

                cd ~/
                DIR=/home/tanlx/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv $(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip

                wget https://storage.googleapis.com/chrome-for-testing-public/126.0.6478.55/linux64/chromedriver-linux64.zip
                unzip -o chromedriver-linux64.zip
                sudo cp chromedriver-linux64/chromedriver /usr/local/bin/

                google-chrome --product-version
                /usr/local/bin/chromedriver -v

                export PATH=$PATH:/home/tanlx/app
                echo "Starting Selenium Tests"
                python3 login.py >> selenium.log

                echo "Completed Selenium Tests. Check selenium.log for results."
                cat selenium.log

                # Create the directory if it doesn't exist
                if [ ! -d "/var/log/selenium" ]; then
                  sudo mkdir -p /var/log/selenium
                fi

                # Set permissions for the directory
                sudo chmod 664 /var/log/selenium

                # Copy the log file and overwrite if it exists
                sudo cp -f selenium.log /var/log/selenium/selenium.log

#--------------------------------------------#
# TEST STAGE
#--------------------------------------------#
- stage: Test
  jobs:

  - job: PostmanTest
    steps:

    - task: Bash@3
      displayName: Install Node.js and npm
      inputs:
        targetType: 'inline'
        script: |
          sudo apt-get update -y
          sudo apt-get install curl -y
          curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
    # Postman - Install Newman
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    # Postman Data Validation Test Suite
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run APIs.Data_Validation_Test.json -e Env.RegressionTest.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    # Postman Regression Test Suite
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run APIs.Regression_Test_Suite.json -e Env.RegressionTest.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'


    # Postman - Publish Results
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'      # ToDo
        mergeTestResults: true
        testRunTitle:   'PostmanTest'    # ToDo
