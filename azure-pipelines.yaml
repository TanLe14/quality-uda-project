name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

pool: tanlx-pool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'quality-uda-conn'
  resourceGroupName: 'Azuredevops'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  applicationname: 'myApplication-AppService'
  

stages:
#--------------------------------------------#
# BUILD STAGE
#--------------------------------------------#
- stage: Build
  jobs:

  - job: BuildInfrastructure
    steps:
    - task: DownloadSecureFile@1
      name: DownloadedFile
      displayName: Download terraform.tfvars
      inputs:
        secureFile: terraform.tfvars
     
    - script: echo $(DownloadedFile.secureFilePath)
    - script: mv "$(DownloadedFile.secureFilePath)" "$(Build.SourcesDirectory)/terraform/environments/test"
    
    #--------------------------------------------#
    # Use Terraform to create the Infrastructure
    # Install Terraform on the pipeline agent
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'

    # Run Terraform Init on the pipeline agent
    # ToDo: Replace the resource group name, storage account name, and container name below

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate403220699'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'root.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Destroy the resources in Azure by running a separate pipeline.

    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    #--------------------------------------------#
 #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above.
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package FakeRestAPI'
      artifact: drop-fakerestapi

    #--------------------------------------------#
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step


    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package PerformanceTestSuite'
      artifact: drop-perftests

#--------------------------------------------#
# DEPLOYMENT STAGE
#--------------------------------------------#
- stage: Deploy
  jobs:
  #--------------------------------------------#
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    displayName: Deploy FakeRestAPI Web App
    environment: 'test'   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'     # ToDo
              appName: 'tanlx-web-app'       # ToDo
              resourceGroupName: '$(resourceGroupName)' 
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip       # ToDo: Use the published zip artifact.
              deploymentMethod: auto
          
          - task: CmdLine@2
            displayName: 'Run JMeter test suite against the App Service'
            inputs:
              script: |
                sudo apt-get upgrade -y
                sudo apt-get install openjdk-11-jdk -y
                sudo apt-get install openjdk-11-jre-headless -y
                export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/
                wget "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.2.1.tgz"
                tar -xf apache-jmeter-5.2.1.tgz
                unzip -o $(Build.BuildId)-perftests.zip
                
                if [ ! -d "$DIR" ]; then
                    rm -rf jmeter-html-report
                fi
                ./apache-jmeter-5.2.1/bin/jmeter -n -t Stress.jmx -l result-stress-test.csv -e -f -o '$(System.DefaultWorkingDirectory)/jmeter-html-report' -j '$(System.DefaultWorkingDirectory)/jmeter-stress-test.log'
                ./apache-jmeter-5.2.1/bin/jmeter -n -t Endurance.jmx -l result-endurance-test.csv -e -f -o '$(System.DefaultWorkingDirectory)/jmeter-html-report' -j  '$(System.DefaultWorkingDirectory)/jmeter-endurance-test.log'
          
                # check
                ls                                                                    
              workingDirectory: $(Pipeline.Workspace)/drop-perftests            # ToDo: Use the artifact name from the task above

          - task: ArchiveFiles@2
            displayName: 'Archive JMeter report'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/jmeter-html-report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-report.zip'

          # JMeter report - Publish
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-report.zip
            displayName: 'Upload Package JMeter report'
            artifact: drop-jmeter-report

              
