name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

pool: tanlx-pool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'quality-uda-conn'
  resourceGroupName: 'Azuredevops'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  applicationname: 'myApplication-AppService'
  

stages:
#--------------------------------------------#
# BUILD STAGE
#--------------------------------------------#
- stage: Build
  jobs:

  - job: BuildInfrastructure
    steps:
    - task: DownloadSecureFile@1
      name: DownloadedFile
      displayName: Download terraform.tfvars
      inputs:
        secureFile: terraform.tfvars
     
    - script: echo $(DownloadedFile.secureFilePath)
    - script: mv "$(DownloadedFile.secureFilePath)" "$(Build.SourcesDirectory)/terraform/environments/test"
    
    #--------------------------------------------#
    # Use Terraform to create the Infrastructure
    # Install Terraform on the pipeline agent
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'

    # Run Terraform Init on the pipeline agent
    # ToDo: Replace the resource group name, storage account name, and container name below

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate403220699'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'root.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Destroy the resources in Azure by running a separate pipeline.

    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    #--------------------------------------------#
 #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above.
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package FakeRestAPI'
      artifact: drop-fakerestapi

    #--------------------------------------------#
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step


    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package PerformanceTestSuite'
      artifact: drop-perftests

#--------------------------------------------#
# DEPLOYMENT STAGE
#--------------------------------------------#
- stage: Deploy
  jobs:
  #--------------------------------------------#
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    displayName: Deploy FakeRestAPI Web App
    environment: 'test'   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'     # ToDo
              appName: 'myApplication-AppService'       # ToDo
              resourceGroupName: '$(resourceGroupName)' 
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip       # ToDo: Use the published zip artifact.
              deploymentMethod: auto
          
  - job: jmeter_tests
    displayName: jMeter Tests
    steps:
      - task: Bash@3
        displayName: Install jMeter
        inputs:
          targetType: 'inline'
          script: |
            sudo apt-get install openjdk-11-jre-headless -y
            java -version
            wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz -O jmeter.tgz
            tar xzvf jmeter.tgz
            apache-jmeter-5.4.1/bin/jmeter --version
            # create log directory
            mkdir -p log/jmeter
            pwd
            ls -la
      - task: Bash@3
        displayName: Run Stress Test
        inputs:
          targetType: 'inline'
          script: |
            apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/Stress.jmx \
                                     -l log/jmeter/stress-test-result.csv \
                                     -e -f -o log/jmeter/stress-test-report.html \
                                     -j log/jmeter/jmeter-stress-test.log
      - task: Bash@3
        displayName: Run Endurance Test
        inputs:
          targetType: 'inline'
          script: |
            apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/Endurance.jmx \
                                     -l log/jmeter/endurance-test-result.csv \
                                     -e -f -o log/jmeter/endurance-test-report.html \
                                     -j log/jmeter/jmeter-endurance-test.log
      
      - task: ArchiveFiles@2
        displayName: Archive JMeter stress test HTML report
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-report.html'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
          verbose: true
      - task: ArchiveFiles@2
        displayName: Archive JMeter endurance test HTML report
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-report.html'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
          verbose: true
      - task: Bash@3
        displayName: Clean Up Tests
        inputs:
          targetType: 'inline'
          script: |
            rm -rf log/jmeter/stress-test-report.html
            rm -rf log/jmeter/endurance-test-report.html
            cd log/jmeter
            pwd
            ls -la
      - task: PublishPipelineArtifact@1
        displayName: Publish JMeter logs
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
          artifactName: 'drop-jmeter-logs'
              
